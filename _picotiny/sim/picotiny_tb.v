// Code generated by Icestudio 0.5.0-dev
// Wed, 10 Nov 2021 02:24:58 GMT

// Testbench template

`default_nettype none
`define DUMPSTR(x) `"x.vcd`"
`timescale 1 ns / 1 ps


module picotiny_tb;

parameter PERIOD = 1000.0/24.0;
parameter integer UART_PRESCALE = 24000000 / 115200;
//parameter integer UART_PRESCALE = 1;

// Input/Output
reg clk;
reg resetn;

wire ser_rx;
wire ser_tx;
wire [6:0] gpio;

wire flash_clk;
wire flash_csb;
wire flash_mosi;
wire flash_miso;

wire flash_WPb;
wire flash_SIO3;

 // Module instance
picotiny dut (
    .clk(clk),
    .resetn(resetn),

    .flash_clk(flash_clk), 
    .flash_csb(flash_csb),
    .flash_mosi(flash_mosi),
    .flash_miso(flash_miso),

    .ser_rx(ser_rx),
    .ser_tx(ser_tx),
    .gpio(gpio)
);

P25Q32H u_flash( 
    .SCLK(flash_clk), 
    .CSb(flash_csb), 
    .SI(flash_mosi), 
    .SO(flash_miso), 
    .WPb(flash_WPb), 
    .SIO3(flash_SIO3)
);

assign flash_WPb = 1'b1;
assign flash_SIO3 = 1'b1;


assign gpio[6] = 1'b1;


reg        tb_uart_tx_tvalid = 0;
reg  [7:0] tb_uart_tx_tdata  = 0;
wire       tb_uart_tx_tready;

wire       tb_uart_rx_tvalid;
wire [7:0] tb_uart_rx_tdata;

uart_rx u_tb_urx(
    .clk(clk),
    .rst(~resetn),

    .m_axis_tdata(tb_uart_rx_tdata),
    .m_axis_tvalid(tb_uart_rx_tvalid),
    .m_axis_tready(1'b1),

    .rxd(ser_tx),
    .prescale(UART_PRESCALE)
);

uart_tx u_tb_utx(
    .clk(clk),
    .rst(~resetn),

    .s_axis_tdata(tb_uart_tx_tdata),
    .s_axis_tvalid(tb_uart_tx_tvalid),
    .s_axis_tready(tb_uart_tx_tready),

    .txd(ser_rx),
    .prescale(UART_PRESCALE)
);

task send_uart(input [7:0] txdata); begin

    @(posedge clk);
    if (!tb_uart_tx_tready) @(posedge tb_uart_tx_tready);

    @(posedge clk);
    tb_uart_tx_tvalid <= 1'b1;
    tb_uart_tx_tdata <= txdata;

    @(posedge clk);
    tb_uart_tx_tvalid <= 1'b0;
    
end endtask

initial begin
	// ISP test sequence
    /*
    #100;
    #5000;
    send_uart(8'h55);
    send_uart(8'h55);
    send_uart(8'h55);
    send_uart(8'h55);

    #100;
    send_uart(8'h10);
    @(posedge tb_uart_rx_tvalid);
    send_uart(8'h03);
    send_uart(8'hEF);
    send_uart(8'hBE);
    send_uart(8'hAD);
    send_uart(8'hDE);
    @(posedge tb_uart_rx_tvalid);

    #100;
    send_uart(8'h30);
    @(posedge tb_uart_rx_tvalid);
    send_uart(8'h00);
    send_uart(8'h00);
    send_uart(8'h00);
    @(posedge tb_uart_rx_tvalid);

    #100;
    send_uart(8'h40);
    @(posedge tb_uart_rx_tvalid);
    send_uart(8'h00);
    send_uart(8'h00);
    send_uart(8'h00);
    @(posedge tb_uart_rx_tvalid);

    #100;
    send_uart(8'h41);
    send_uart(8'h55);
    @(posedge tb_uart_rx_tvalid);

    #100;
    send_uart(8'hF0);
    @(posedge tb_uart_rx_tvalid);
    */
    #1000;

    // $stop();
end

always @(posedge clk) begin
    if (tb_uart_rx_tvalid) begin
        $display("[%6d] : Receive 0x%02H", $time, tb_uart_rx_tdata);
    end
end

// Clock signal
always #(PERIOD/2) clk = ~clk;

initial begin
    // File were to store the simulation results
    $dumpfile("out.vcd");
    $dumpvars(0, picotiny_tb);

    $readmemh("../fw/fw-brom/build/fw-brom.vx0", dut.u_boot_sram.u_sram_0.mem);
    $readmemh("../fw/fw-brom/build/fw-brom.vx1", dut.u_boot_sram.u_sram_1.mem);
    $readmemh("../fw/fw-brom/build/fw-brom.vx2", dut.u_boot_sram.u_sram_2.mem);
    $readmemh("../fw/fw-brom/build/fw-brom.vx3", dut.u_boot_sram.u_sram_3.mem);
	$display("BROM read..");
    clk = 0;
    resetn = 0;

    #100;
    resetn = 1;
	
 end
 
endmodule
